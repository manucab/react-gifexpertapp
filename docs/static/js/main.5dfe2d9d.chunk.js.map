{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAMlB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDAE0BC,UAAWH,GAFrC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVlB,kBAcZM,GAdY,4CAAH,sDCYLO,EAXK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG9B,OACI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECD0B,SAAEA,GAG1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAGGqB,EDrBwBK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,qCACE,qBAAIJ,UAAU,mCAAd,cAAmDhB,EAAnD,OAECoB,GAAW,mBAAGJ,UAAU,kCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVnBgB,EAAe,WAGxB,MAAoCzC,mBAAU,CAAC,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OAEI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACf,GAAD,OACZ,cAAC,EAAD,CAEIM,SAAWN,GADNA,Y,MCrBjCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5dfe2d9d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\n//OJO a las llaves en los props\nconst AddCategory = ( {setCategories} ) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(inputValue.trim().length > 2) {\n\n        setCategories( c => [inputValue, ...c])\n        setInputValue('')\n    }\n\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        type=\"text\" \n        value={inputValue} \n        onChange={handleInputChange} \n        />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","\nexport const getGifs = async ( category ) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=LbdoyYjL4P7jErnmi7woiTK3GG41uo8n`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  };","import React from 'react'\n\nconst GifGridItem = ( {id, title, url} ) => {\n    \n\n    return (\n        <div className='card animate_animated animate__fadeIn'>\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from \"react\";\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate_animated animate__fadeIn'> {category} </h3>\n\n      {loading && <p className='animate_animated animate__flash'>Cargando</p>}\n\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect(() => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n      \n    }, [category]);\n\n\n    return state\n\n\n\n}","import React, {useState} from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n//rafc + tab\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState( ['One Punch'])\n\n    // const handleAdd = () => {\n\n    //     //setCategories([...categories,'Death Note'])\n    //     setCategories( cats => [...cats, 'Death Note'])\n\n    // }\n\n    return (\n\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( (c) => ( \n                        <GifGrid \n                            key={c}\n                            category={ c } \n                        />\n                    ))\n                }\n            </ol>\n\n        </>\n\n    )\n\n\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}